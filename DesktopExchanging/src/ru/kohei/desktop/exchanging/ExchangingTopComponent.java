/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.kohei.desktop.exchanging;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.SwingUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import ru.kohei.exchanging.api.ExchangingPoint;
import ru.kohei.exchanging.api.ExchangingServer;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//ru.kohei.desktop.exchanging//Exchanging//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ExchangingTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "layoutmode", openAtStartup = false)
@ActionID(category = "Window", id = "ru.kohei.desktop.exchanging.ExchangingTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExchangingAction",
        preferredID = "ExchangingTopComponent")
@Messages({
    "CTL_ExchangingAction=Exchanging",
    "CTL_ExchangingTopComponent=Exchanging Window",
    "HINT_ExchangingTopComponent=This is a Exchanging window"
})
public final class ExchangingTopComponent extends TopComponent {
    private ExchangingServer m_exchangingServer = null;
    
    public ExchangingTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExchangingTopComponent());
        setToolTipText(Bundle.HINT_ExchangingTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

        m_exchangingServer = Lookup.getDefault().lookup(ExchangingServer.class);
        if (m_exchangingServer == null) {
            setEnabled(false);
            return;
        }
        
        m_exchangingServer.addListener(new ExchangingPoint.StateListener() {
            @Override
            public void onStateChanged(ExchangingPoint.State state) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        ExchangingPoint.State state = m_exchangingServer.state();
                        runButton.setEnabled(state == ExchangingPoint.State.CLOSED);
                        stopButton.setEnabled(state == ExchangingPoint.State.OPENED);
                        portField.setEnabled(state == ExchangingPoint.State.CLOSED);
                    }
                });
            }
        });
        
        runButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent action) {
                Integer port = Integer.parseInt(portField.getText());
                m_exchangingServer.open(port.intValue());
            }
        });
        
        stopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent action) {
                m_exchangingServer.close();
                m_exchangingServer.detachAllExchangers();
            }
        });
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        connectionPanel = new javax.swing.JPanel();
        connectionLabel = new javax.swing.JLabel();
        portField = new javax.swing.JFormattedTextField();
        exchangingPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        connectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExchangingTopComponent.class, "ExchangingTopComponent.connectionPanel.border.title"))); // NOI18N
        connectionPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(connectionLabel, org.openide.util.NbBundle.getMessage(ExchangingTopComponent.class, "ExchangingTopComponent.connectionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        connectionPanel.add(connectionLabel, gridBagConstraints);

        portField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        portField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        portField.setText(org.openide.util.NbBundle.getMessage(ExchangingTopComponent.class, "ExchangingTopComponent.portField.text")); // NOI18N
        portField.setMinimumSize(new java.awt.Dimension(60, 20));
        portField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        connectionPanel.add(portField, gridBagConstraints);

        exchangingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExchangingTopComponent.class, "ExchangingTopComponent.exchangingPanel.border.title"))); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExchangingTopComponent.class, "ExchangingTopComponent.jLabel1.text")); // NOI18N
        jLabel1.setEnabled(false);

        javax.swing.GroupLayout exchangingPanelLayout = new javax.swing.GroupLayout(exchangingPanel);
        exchangingPanel.setLayout(exchangingPanelLayout);
        exchangingPanelLayout.setHorizontalGroup(
            exchangingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        exchangingPanelLayout.setVerticalGroup(
            exchangingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exchangingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(ExchangingTopComponent.class, "ExchangingTopComponent.runButton.text")); // NOI18N
        runButton.setPreferredSize(new java.awt.Dimension(60, 23));

        org.openide.awt.Mnemonics.setLocalizedText(stopButton, org.openide.util.NbBundle.getMessage(ExchangingTopComponent.class, "ExchangingTopComponent.stopButton.text")); // NOI18N
        stopButton.setPreferredSize(new java.awt.Dimension(60, 23));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(exchangingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(connectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exchangingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 145, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectionLabel;
    private javax.swing.JPanel connectionPanel;
    private javax.swing.JPanel exchangingPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JFormattedTextField portField;
    private javax.swing.JButton runButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    
}
