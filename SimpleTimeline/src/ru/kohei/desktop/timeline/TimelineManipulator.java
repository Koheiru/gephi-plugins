/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.kohei.desktop.timeline;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import ru.kohei.timeline.api.TimelineController;
import ru.kohei.timeline.api.TimelineModel;

/**
 *
 * @author Prostov Yury
 */
public class TimelineManipulator extends javax.swing.JPanel {

    private transient TimelineController controller;
    
    public TimelineManipulator() {
        initComponents();
        
        playButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                TimelineModel model = controller.getModel();
                if (!model.isPlaying()) {
                    controller.startPlay();
                } else {
                    controller.stopPlay();
                }
            }
        });
        
        /*
        pauseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                if (model.isPlaying()) {
                    controller.stopPlay();
                }
            }
        });
        */
        
        stepForwardButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                controller.stepForward();
            }
        });
        
        stepBackwardButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                controller.stepBackward();
            }
        });
        
        rewindForwardButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                TimelineModel model = controller.getModel();
                if (model != null) {
                    double intervalBegin = model.getIntervalStart();
                    double intervalEnd   = model.getIntervalEnd();
                    double intervalLength = intervalEnd - intervalBegin;
                    double min = model.getCustomMin();
                    controller.setInterval(min, min + intervalLength);
                }
            }
        });
        
        rewindBackwardButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                TimelineModel model = controller.getModel();
                if (model != null) {
                    double intervalBegin = model.getIntervalStart();
                    double intervalEnd   = model.getIntervalEnd();
                    double intervalLength = intervalEnd - intervalBegin;
                    double max = model.getCustomMax();
                    controller.setInterval(max - intervalLength, max);                    
                }
            }
        });
    }

    public void initialize(TimelineController controller) {
        this.controller = controller;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rewindBackwardButton = new javax.swing.JButton();
        stepBackwardButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stepForwardButton = new javax.swing.JButton();
        rewindForwardButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(400, 30));
        setLayout(new java.awt.GridBagLayout());

        rewindBackwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/kohei/desktop/timeline/resources/rewind_backward_button.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(rewindBackwardButton, org.openide.util.NbBundle.getMessage(TimelineManipulator.class, "TimelineManipulator.rewindBackwardButton.text")); // NOI18N
        rewindBackwardButton.setMaximumSize(new java.awt.Dimension(50, 28));
        rewindBackwardButton.setMinimumSize(new java.awt.Dimension(50, 28));
        rewindBackwardButton.setPreferredSize(new java.awt.Dimension(50, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(rewindBackwardButton, gridBagConstraints);

        stepBackwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/kohei/desktop/timeline/resources/step_backward_button.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(stepBackwardButton, org.openide.util.NbBundle.getMessage(TimelineManipulator.class, "TimelineManipulator.stepBackwardButton.text")); // NOI18N
        stepBackwardButton.setMaximumSize(new java.awt.Dimension(50, 28));
        stepBackwardButton.setMinimumSize(new java.awt.Dimension(50, 28));
        stepBackwardButton.setPreferredSize(new java.awt.Dimension(50, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(stepBackwardButton, gridBagConstraints);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/kohei/desktop/timeline/resources/play_forward_button.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(playButton, org.openide.util.NbBundle.getMessage(TimelineManipulator.class, "TimelineManipulator.playButton.text")); // NOI18N
        playButton.setMaximumSize(new java.awt.Dimension(50, 28));
        playButton.setMinimumSize(new java.awt.Dimension(50, 28));
        playButton.setPreferredSize(new java.awt.Dimension(50, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(playButton, gridBagConstraints);

        stepForwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/kohei/desktop/timeline/resources/step_forward_button.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(stepForwardButton, org.openide.util.NbBundle.getMessage(TimelineManipulator.class, "TimelineManipulator.stepForwardButton.text")); // NOI18N
        stepForwardButton.setMaximumSize(new java.awt.Dimension(50, 28));
        stepForwardButton.setMinimumSize(new java.awt.Dimension(50, 28));
        stepForwardButton.setPreferredSize(new java.awt.Dimension(50, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(stepForwardButton, gridBagConstraints);

        rewindForwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/kohei/desktop/timeline/resources/rewind_forward_button.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(rewindForwardButton, org.openide.util.NbBundle.getMessage(TimelineManipulator.class, "TimelineManipulator.rewindForwardButton.text")); // NOI18N
        rewindForwardButton.setMaximumSize(new java.awt.Dimension(50, 28));
        rewindForwardButton.setMinimumSize(new java.awt.Dimension(50, 28));
        rewindForwardButton.setPreferredSize(new java.awt.Dimension(50, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(rewindForwardButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton playButton;
    private javax.swing.JButton rewindBackwardButton;
    private javax.swing.JButton rewindForwardButton;
    private javax.swing.JButton stepBackwardButton;
    private javax.swing.JButton stepForwardButton;
    // End of variables declaration//GEN-END:variables
}
